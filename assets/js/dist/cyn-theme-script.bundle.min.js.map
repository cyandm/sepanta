{
  "version": 3,
  "sources": ["../functions/common.js", "../functions/modals.js", "../functions/subMenuMobile.js", "../functions/submenu.js", "../index.js"],
  "sourcesContent": ["/**\n * The current environment, either 'development' or 'production'.\n * @constant {string}\n * @default\n */\nconst ENVIRONMENT = 'development'; // 'development', 'production'\n\n/**\n * Checks if the environment is 'development'.\n *\n * This function compares the current environment (stored in `ENVIRONMENT`) to the string 'development'.\n * It returns `true` if the environment is 'development', and `false` otherwise.\n *\n * @function\n * @name isDev\n * @returns {boolean} `true` if the environment is 'development', otherwise `false`.\n * @example\n * // Usage example:\n * if (isDev()) {\n *   console.log('We are in development mode.');\n * }\n */\nexport function isDev() {\n\treturn ENVIRONMENT === 'development';\n}\n\n/**\n * Logs a message to the console, but only if the environment is 'development'.\n *\n * This function first checks if the environment is 'development' by calling the `isDev()` function.\n * If the environment is not 'development', the function does nothing and returns early.\n * If the environment is 'development', the provided message is logged to the console.\n *\n * @function\n * @name devLog\n * @param {any[]} variable - The message or value to log to the console.\n * @returns {void}\n * @example\n * // Usage example:\n * devLog('This is a development log message.');\n * // Only logs if the environment is 'development'.\n */\nexport function devLog(...variable) {\n\tif (isDev() === false) return;\n\n\tconsole.log(...variable);\n}\n", "import { devLog } from \"./common\";\r\n/**\r\n * Initializes modal functionality for opening, closing, and toggling modals.\r\n * It uses specific HTML attributes to identify modal-related elements and manage their state.\r\n * Debugging information is logged to the console using the `devLog` function.\r\n *\r\n * @function\r\n * @name Modals\r\n * @example\r\n * // Example HTML:\r\n * <div modal data-modal-name=\"example-modal\" data-active=\"false\">\r\n *   <p>Modal Content</p>\r\n * </div>\r\n * <button modal-opener data-modal-name=\"example-modal\">Open Modal</button>\r\n * <button modal-closer data-modal-name=\"example-modal\">Close Modal</button>\r\n * <button modal-toggler data-modal-name=\"example-modal\">Toggle Modal</button>\r\n *\r\n * @description\r\n * The function listens for `click` events on elements with the following attributes:\r\n * - `modal-opener`: Opens the corresponding modal.\r\n * - `modal-closer`: Closes the corresponding modal.\r\n * - `modal-toggler`: Toggles the visibility of the corresponding modal.\r\n *\r\n * When an opener or closer is clicked, the `data-active` attribute of the corresponding modal is set to either `true` (open) or `false` (closed).\r\n * When a toggler is clicked, the `data-active` attribute is toggled between `true` and `false`.\r\n *\r\n * The function logs the following to the console for debugging:\r\n * - The state changes of modals (opened or closed).\r\n * - The triggers (open, close, toggle) for each modal.\r\n *\r\n * @returns {void}\r\n */\r\nexport function Modals() {\r\n  devLog(\"Modal function is running\");\r\n  const popupBackdrop = document.querySelector(\"[modal-backdrop]\");\r\n  const modals = document.querySelectorAll(\"[modal]\");\r\n\r\n  popupBackdrop.addEventListener(\"click\", (e) => {\r\n    e.stopPropagation();\r\n    modals.forEach((modal) => {\r\n      modal.dataset.active = \"false\";\r\n      document.body.style.overflow = \"auto\";\r\n\r\n      modal.dispatchEvent(\r\n        new CustomEvent(\"modal-state-change\", {\r\n          detail: {\r\n            handler: popupBackdrop,\r\n          },\r\n        })\r\n      );\r\n    });\r\n    popupBackdrop.dataset.active = \"false\";\r\n  });\r\n\r\n  /**\r\n   * Utility function to handle the state of a modal.\r\n   *\r\n   * @private\r\n   * @param {string} modalName - The name of the modal to modify.\r\n   * @param {string} state - The state to set (`'true'` or `'false'`).\r\n   */\r\n  const handleModalState = (modalName, state) => {\r\n    const modals = document.querySelectorAll(\r\n      `[modal][data-modal-name=\"${modalName}\"]`\r\n    );\r\n    if (!modals) {\r\n      devLog(`Modal \"${modalName}\" not found.`);\r\n      return;\r\n    }\r\n\r\n    modals.forEach((modal) => {\r\n      modal.dataset.active = state;\r\n\r\n      if (state === \"true\") {\r\n        document.body.style.overflow = \"hidden\";\r\n        popupBackdrop.dataset.active = \"true\";\r\n      } else {\r\n        document.body.style.overflow = \"auto\";\r\n        popupBackdrop.dataset.active = \"false\";\r\n      }\r\n    });\r\n\r\n    devLog(`Modal \"${modalName}\" state set to \"${state}\".`);\r\n  };\r\n\r\n  /**\r\n   * Adds click event listeners to elements matching the provided selector and performs the specified action.\r\n   *\r\n   * @private\r\n   * @param {string} selector - The selector for modal-related elements (e.g., `[modal-opener]`).\r\n   * @param {function} action - The action to perform when the element is clicked (e.g., opening, closing, toggling).\r\n   * @param {string} actionName - A human-readable name for the action (e.g., \"Open\", \"Close\", \"Toggle\").\r\n   */\r\n  const addEventListeners = (selector, action, actionName) => {\r\n    const elements = document.querySelectorAll(selector);\r\n    elements.forEach((element) => {\r\n      const modalName = element.dataset.modalName;\r\n      const modal = document.querySelector(\r\n        `[modal][data-modal-name=\"${modalName}\"]`\r\n      );\r\n\r\n      element.addEventListener(\"click\", () => {\r\n        action(modalName);\r\n\r\n        modal.dispatchEvent(\r\n          new CustomEvent(\"modal-state-change\", {\r\n            detail: {\r\n              handler: element,\r\n            },\r\n          })\r\n        );\r\n      });\r\n\r\n      devLog(`\"${actionName}\" triggered for modal \"${modalName}\".`);\r\n    });\r\n  };\r\n\r\n  //************************************************************************Code Logic\r\n\r\n  // Open modals\r\n  addEventListeners(\r\n    \"[modal-opener]\",\r\n    (modalName) => handleModalState(modalName, \"true\"),\r\n    \"Open\"\r\n  );\r\n\r\n  // Close modals\r\n  addEventListeners(\r\n    \"[modal-closer]\",\r\n    (modalName) => handleModalState(modalName, \"false\"),\r\n    \"Close\"\r\n  );\r\n\r\n  // Toggle modals\r\n  addEventListeners(\r\n    \"[modal-toggler]\",\r\n    (modalName) => {\r\n      const modal = document.querySelector(\r\n        `[modal][data-modal-name=\"${modalName}\"]`\r\n      );\r\n\r\n      if (!modal) {\r\n        devLog(`Toggle failed: Modal \"${modalName}\" not found.`);\r\n        return;\r\n      }\r\n\r\n      const newState = modal.dataset.active === \"true\" ? \"false\" : \"true\";\r\n      devLog(`Toggling modal \"${modalName}\" to \"${newState}\".`);\r\n      handleModalState(modalName, newState);\r\n    },\r\n    \"Toggle\"\r\n  );\r\n}", "function subMenuMobile() {\r\n  jQuery(document).ready(function ($) {\r\n    // SVG \u0622\u06CC\u06A9\u0648\u0646 Arrow-12 (\u0646\u0645\u0648\u0646\u0647 \u0641\u0631\u0636\u06CC)\r\n    var arrowIcon = `<i class=\"sub-menu-icon mt-1.5 flex justify-end\" style=\"transition:transform 0.3s;vertical-align:middle;\">\r\n      <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 25\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"w-6 rotate-90 transition-all duration-300\">\r\n        <path d=\"M10 8L14 12.5L10 17\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n      </svg>\r\n    </i>`;\r\n\r\n    $(\"#mobile-menu .menu-item-has-children\").each(function () {\r\n      var $menuItem = $(this);\r\n      var $subMenuToggle = $(arrowIcon);\r\n      $menuItem.prepend($subMenuToggle);\r\n\r\n      $subMenuToggle.on(\"click\", function (e) {\r\n        e.stopPropagation();\r\n        var $subMenu = $menuItem.children(\"ul\");\r\n        if ($subMenu.is(\":visible\")) {\r\n          $subMenu.slideUp();\r\n          $subMenuToggle.find(\"svg\").removeClass(\"rotate-[270deg]\");\r\n        } else {\r\n          $subMenu.slideDown();\r\n          $subMenuToggle.find(\"svg\").addClass(\"rotate-[270deg]\");\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport { subMenuMobile };\r\n", "function addIcons() {\r\n  document\r\n    .querySelectorAll(\"#main-menu .menu-item-has-children\")\r\n    ?.forEach((menu) => {\r\n      const svg = document.querySelector(\"div#chevron-down\")?.cloneNode(true);\r\n      const link = menu.querySelector(\"a\");\r\n\r\n      svg.classList.remove(\"hidden\");\r\n      svg.classList.add(\"mr-1\", \"size-3\", \"transition-all\", \"duration-300\");\r\n      link.appendChild(svg);\r\n    });\r\n}\r\n\r\nexport { addIcons };", "/**\n * Main entry point for the theme's JavaScript.\n * you must add any functions for every javascript file to the import statement below.\n */\n\nimport { Modals } from './functions/modals';\nimport { subMenuMobile } from './functions/subMenuMobile';\nimport { addIcons } from './functions/submenu';\n\nModals();\nsubMenuMobile();\naddIcons();"],
  "mappings": "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",
  "names": ["ENVIRONMENT", "isDev", "devLog", "variable", "Modals", "devLog", "popupBackdrop", "modals", "modal", "handleModalState", "modalName", "state", "addEventListeners", "selector", "action", "actionName", "element", "newState", "subMenuMobile", "$", "arrowIcon", "$menuItem", "$subMenuToggle", "$subMenu", "addIcons", "_a", "menu", "svg", "link", "Modals", "subMenuMobile", "addIcons"]
}
